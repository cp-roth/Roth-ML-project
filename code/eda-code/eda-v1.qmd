---
title: "Exploratory Analysis Script"
author: "Cassia Roth"
date: "`r Sys.Date()`"
output: html_document
---

# Setup

```{r, message=FALSE,  warning=FALSE}
#load needed packages. make sure they are installed.
#install.packages("hrbrthemes")
library(tidyverse) #for data processing/cleaning; includes ggplot2, tidyr, readr, dplyr, stringr, purr, forcats
library(skimr) #for nice visualization of data 
library(here) #to set paths
library(renv) #for package management
library(knitr) #for nice tables
library(kableExtra) #for nice tables
library(gt) #for nice tables
library(gtsummary) #for summary tables
library(ggplot2) #for plotting 
library(hrbrthemes) #for nice themes
library(flextable) #for nice tables
hrbrthemes::import_roboto_condensed() #import needed fonts for hrbrthemes
rm(list=ls()) #clear the environment
```

Load the data. First, I will load the ML_summary set for summary statistics.

```{r}
# Path to summary data. Note the use of the here() package and not absolute paths
data_location <- here::here("data","processed-data","ML_summary.rds")

# Load data
ML_summary <- readRDS(data_location)
```

# Data exploration through tables

Showing a bit of code to produce and save a summary table.

```{r}
# Create summary
summary = skimr::skim(ML_summary)
print(summary)

# Save to file
summarytable_file = here("results", "tables", "summarytable.rds")
saveRDS(summary, file = summarytable_file)
```

I am the results to the `results` folder. All final table/figures will have `_final` in the name. This is to make sure we don't overwrite anything we might want to keep. All supplemental table/figures will have a `suppl` in the name.

# Data exploration through figures

Histogram plots for continuous outcomes. 

I will explore maternal age first.

```{r}
# Create histogram plot
age_plot <- ML_summary %>% filter(!is.na(Age)) %>% # Filter out NAs
  ggplot(aes(x = Age)) +
  geom_histogram(binwidth = 0.5, width= 0.8, fill="#69b3a2") +
  geom_vline(xintercept = c(15, 49), linetype = "dashed", color = "red") +  # Add vertical lines that mark reproductive age
  theme_ipsum() +
  theme(plot.title = element_text(size=15))
plot(age_plot)

# Save plot to file
figure_file = here("results","figures", "age_distribution.png")
ggsave(filename = figure_file, plot=age_plot, bg="white") #background is white
```

Now infant birth weight.

```{r}
# Create histogram plot
weight_plot <- ML_summary %>% filter(!is.na(Weightgrams)) %>% #filter out NAs
  ggplot(aes(x = Weightgrams)) +
  geom_histogram(binwidth = 25, fill="#69b3a2") +
  geom_vline(xintercept = c(2500, 4000), linetype = "dashed", color = "red") +  # Add vertical lines that mark normal birthweight
  theme_ipsum() +
  theme(plot.title = element_text(size=15))
plot(weight_plot)

# Save plot to file
figure_file = here("results","figures", "weight_distribution.png")
ggsave(filename = figure_file, plot=weight_plot, bg="white") #background is white
```
Now infant birth length.

```{r}
# Create histogram plot
length_plot <- ML_summary %>% filter(!is.na(Lengthcentimeters)) %>% #filter out NAs
  ggplot(aes(x = Lengthcentimeters)) +
  geom_histogram(binwidth = 1, fill="#69b3a2") +
  geom_vline(xintercept = c(49), linetype = "dashed", color = "red") +  # Add vertical lines that mark average birth length for both sexes
  theme_ipsum() +
  theme(plot.title = element_text(size=15))
plot(length_plot)

# Save plot to file
figure_file = here("results","figures","length_distribution.png")
ggsave(filename = figure_file, plot=length_plot, bg="white") #background is white
```
It appears there are some outliers, so I will need to go back and look at the data.

For now, let's look at height as function of weight. Length is positively correlated with weight, which is unsurprising.

```{r}
#Create plot
length_weight <- ML_summary %>%
  filter(!is.na(Lengthcentimeters) & !is.na(Weightgrams)) %>% #filter out NAs
  ggplot(aes(x=Lengthcentimeters, y=Weightgrams)) + geom_point() + geom_smooth(method='lm')
plot(length_weight)

#Save file
figure_file = here("results","figures","length_weight.png")
ggsave(filename = figure_file, plot=length_weight, bg="white") #background is white
```

Once more height as function of weight, stratified by sex.

```{r}
#Create plot
length_weight_sex <- ML_summary %>% filter(!is.na(Lengthcentimeters) & !is.na(Weightgrams) & !is.na(Sex)) %>% 
  ggplot(aes(x=Lengthcentimeters, y=Weightgrams, color = Sex)) + geom_point() + geom_smooth(method='lm')
plot(length_weight_sex)

#Save file
figure_file = here("results","figures","length_weight_sex.png")
ggsave(filename = figure_file, plot=length_weight_sex, bg="white") #background is white
```
# Feature Engineering

Before we create a summary table, I will engage in another round of data cleaning for easier analysis. First, I need to create dummy variables for categories. I will start with the `Color` variable, which is maternal skin color. I will also create dummy variables for the `Status` and `Nationality` variables for ease of interpretation. The original data categorized maternal racial categories as White (*branca*), the reference group here; mixed-race (*parda*); and Black (*preta*). I maintained this categorization. However, I also created a new dummy variable for skin color, combining Black and mixed-race patients into one category, `Afro-Descent`, and all White patients into a `Euro-Descent` category. 

For the `Status` variable, the Supplementary Table 1 will include all of the gravidity or parity categories from the original data. But I will also create a dummy variable for the summary table for both the final paper and the linear analysis: one category for first pregnancy/birth and one for second or more pregnancies/births. With this, I am removing the distinction between parity and gravidity since it is unclear from the original data if the physicians were categorizing the women before the delivery or after. Thus, I am assuming that both gravidity and parity refer to previous births, which risks including a history of stillbirths into a presumed history of live births. However, because these data are about women entering a hospital to give birth, rather than to receive prenatal care for a pregnancy, and this assumption can provide more statistical power for a linear regression, I assume this risk. 

For first pregnancy/birth, I combine all "primi" statuses and "nulli" statuses (gravida or parous) into `nulliparous`. For second or more pregnancies/births, I combine all multiple statuses (gravida or parous) into `multiparous`. This combines "multigesta", "secundigesta", and "trigesta" (-gesta in Portuguese meaning -gravida in English) into `multiparous`, since they mean the same thing (two or more pregnancies). I also combine "secundipara" and "multipara" into the category `multiparous`, since this means two or more births. The words in Portuguese and English here are the same. 

For the `Nationality` variable, I combine all European nationalities into one category, "European", all Latin American nationalities into "Latin American", and all Middle Eastern nationalities into "Middle Eastern". I am combining categories because for many of the `European` and `Latin American` categories, there were very few observations. Moreover, I am interested in immigration as a general status rather than the relationship between specific immigrant countries and health status in Brazil. "Brazilian" will remain the same. I also create a dummy variable to check for collinearity between immigration status and skin color. I create a `Brazilian` variable (yes/no), and then I run a sub-sample analysis dropping all non-Brazilians.

Finally, for the summary table, in which I want to include infant birth weight stratified by maternal skin color and by fetal sex, I will create new dummy variables here for that purpose. For maternal skin color, these variables are `Weightblack`, `Weightmixed`, and `Weightwhite`. These are categorical variables (yes/no). From these, I create new continuous dummy variables for birth weight according to maternal skin color: `WeightgramsBlack`, `WeightgramsMixed`, and `WeightgramsWhite`. I do the same process for fetal sex: `Weightfemale`, `Weightmale`, `WeightgramsFemale`, and `WeightgramsMale`.

Using these new dummy variables, I created new dummy variables defining if the infants were normal birth weight (NBW $>2500$ g) or low birth weight (LBW $\leq2500$ g) for all infants and then stratified by maternal skin color. These are `Afro_NBW` and `Afro_LBW`; and `Euro_NBW` and `Euro_LBW`. I will use these to see how many infants were low birth weight or normal birth weight for each maternal skin category in the `introanalysis-v1.qmd` file.

I will now change the observations from Portuguese to English for the remaining observations to clean up things for the summary table. In the future, I should perform this step in the processing script.

```{r}
# Create dummy variables

# Change observations from Portuguese to English
ML_summary <- ML_summary %>%
  mutate(
    Color = recode_factor(Color, "Preta" = "Black", "Parda" = "Mixed Race", "Branca" = "White"),
    Nationality = recode_factor(Nationality, "Alema" = "German", "Argentina" = "Argentine", "Austriaca" = "Austrian", "Brasileira" = "Brazilian", "Espanhola" = "Spanish", "Francesa" = "French", "Italiana" = "Italian", "Paraguaya" = "Paraguayan", "Polaca" = "Polish", "Portuguesa" = "Portuguese", "Rumania" = "Romanian", "Russa" = "Russian", "Suiça" = "Swiss", "Siria" = "Syrian", "Uruguaya" = "Uruguayan"),
    Birth = recode_factor(Birth, "aborto" = "Abortion", "intervencionista" = "Interventionist", "natural" = "Natural", "operatório" = "Operative"),
    MaternalOutcome = recode_factor(MaternalOutcome, "alta" = "Discharged", "morta" = "Death", "transferência" = "Hospital transferal"),
    FetalOutcome = recode_factor(FetalOutcome, "vivo" = "Live Birth", "morto" = "Stillbirth"),
    Status = recode_factor(Status, "Multigesta" = "Multigravida", "Trigesta" = "Trigravida", "Secundigesta" = "Secundigravida", "Secundipara" = "Secundiparous", "Multipara" = "Multiparous", "Primigesta" = "Primigravida", "Nulipara" = "Nulliparous", "Primipara" = "Primiparous")
    )

# Recode factor using dplyr
ML_summary$ModifiedColor <- recode_factor(ML_summary$Color, "Mixed Race" = "Afro-Descent", "Black" = "Afro-Descent", "White" = "Euro-Descent")

# Create dummy variables for status and change to English
ML_summary$ModifiedStatus <- recode_factor(ML_summary$Status, "Secundigravida" = "Multiparous", "Trigravida" = "Multiparous", "Multigravida" = "Multiparous", "Secundiparous" = "Multiparous", "Multiparous" = "Multiparous", "Primigravida" = "Nulliparous", "Nulliparous" = "Nulliparous", "Primiparous" = "Nulliparous")

# Create dummy variables for nationality
ML_summary$ModifiedNationality <- recode_factor(ML_summary$Nationality, "German" = "European", "Argentine" = "Latin American", "Austrian" = "European", "Brazilian" = "Brazilian", "Spanish" = "European", "French" = "European", "Italian" = "European", "Paraguayan" = "Latin American", "Polish" = "European", "Portuguese" = "European", "Romanian" = "European", "Russian" = "European", "Swiss" = "European", "Syrian" = "Middle Eastern", "Uruguayan" = "Latin American")

# Create dummy variables for birth weight for infants born to Black, mixed-race, and White mothers for summary table. Create dummy variables for birth weight according to fetal sex.
ML_summary <- ML_summary %>%
  mutate(
    Weightblack = factor(if_else(Color == "Black", "Yes", "No"), levels = c("No", "Yes")),
    Weightmixed = factor(if_else(Color == "Mixed Race", "Yes", "No"), levels = c("No", "Yes")),
    Weightwhite = factor(if_else(Color == "White", "Yes", "No"), levels = c("No", "Yes")),
    Weightfemale = factor(if_else(Sex == "F", "Yes", "No"), levels = c("No", "Yes")),
    Weightmale = factor(if_else(Sex == "M", "Yes", "No"), levels = c("No", "Yes")),
    WeightgramsBlack = if_else(Weightblack == "Yes", Weightgrams, NA_real_),
    WeightgramsWhite = if_else(Weightwhite == "Yes", Weightgrams, NA_real_),
    WeightgramsMixed = if_else(Weightmixed == "Yes", Weightgrams, NA_real_),
    WeightgramsFemale = if_else(Weightfemale == "Yes", Weightgrams, NA_real_),
    WeightgramsMale = if_else(Weightmale == "Yes", Weightgrams, NA_real_),
    WeightgramsAfro = if_else(ModifiedColor == "Afro-Descent", Weightgrams, NA_real_),
    WeightgramsEuro = if_else(ModifiedColor == "Euro-Descent", Weightgrams, NA_real_)
  )

# Create dummy variables for birth weight category by maternal skin color for summary table
ML_summary <- ML_summary %>%
  mutate(
   Afro_LBW = ifelse(BirthweightCategory == "LBW" & (!is.na(WeightgramsBlack) | !is.na(WeightgramsMixed)), 1, 0),
   Afro_NBW = ifelse(BirthweightCategory == "NBW" & (!is.na(WeightgramsBlack) | !is.na(WeightgramsMixed)), 1, 0),
   Euro_LBW = ifelse(BirthweightCategory == "LBW" & !is.na(WeightgramsWhite), 1, 0),
   Euro_NBW = ifelse(BirthweightCategory == "NBW" & !is.na(WeightgramsWhite), 1, 0),
 )
  
# Change value to missing for opposite skin color infants for summary statistics. This uses the wrong denominator (all mothers regardless of whether we have their infants' birth weights, so I will use code below.)
#ML_summary <- ML_summary %>%
  #mutate(Afro_LBW = case_when(ModifiedColor == "Euro-Descent" ~ NA_real_, TRUE ~ Afro_LBW),
    #Euro_LBW = case_when(ModifiedColor == "Afro-Descent" ~ NA_real_,TRUE ~ Euro_LBW))

# Verify new variables
str(ML_summary[, c("Weightblack", "Weightmixed", "Weightwhite", "Weightfemale", "Weightmale", "WeightgramsBlack", "WeightgramsMixed", "WeightgramsWhite", "WeightgramsFemale", "WeightgramsMale", "Afro_LBW", "Afro_NBW", "Euro_LBW", "Euro_NBW")])

# Create dummy variables for birth weight for infants born to mothers of different nationalities for summary table.
ML_summary <- ML_summary %>%
  mutate( # First create yes/not dummy variables for count
    WeightPor = factor(if_else(Nationality == "Portuguese", "Yes", "No"), levels = c("No", "Yes")),
    WeightGer = factor(if_else(Nationality == "German", "Yes", "No"), levels = c("No", "Yes")),
    WeightIta = factor(if_else(Nationality == "Italian", "Yes", "No"), levels = c("No", "Yes")),
    WeightAus = factor(if_else(Nationality == "Austrian", "Yes", "No"), levels = c("No", "Yes")),
    WeightFr = factor(if_else(Nationality == "French", "Yes", "No"), levels = c("No", "Yes")),
    WeightSp = factor(if_else(Nationality == "Spanish", "Yes", "No"), levels = c("No", "Yes")),
    WeightPol = factor(if_else(Nationality == "Polish", "Yes", "No"), levels = c("No", "Yes")),
    WeightSw = factor(if_else(Nationality == "Swiss", "Yes", "No"), levels = c("No", "Yes")),
    WeightRom = factor(if_else(Nationality == "Romanian", "Yes", "No"), levels = c("No", "Yes")),
    WeightRus = factor(if_else(Nationality == "Russian", "Yes", "No"), levels = c("No", "Yes")),
    WeightArg = factor(if_else(Nationality == "Argentine", "Yes", "No"), levels = c("No", "Yes")),
    WeightPar = factor(if_else(Nationality == "Paraguayan", "Yes", "No"), levels = c("No", "Yes")),
    WeightUr = factor(if_else(Nationality == "Uruguayan", "Yes", "No"), levels = c("No", "Yes")),
    WeightSy = factor(if_else(Nationality == "Syrian", "Yes", "No"), levels = c("No", "Yes")),
    WeightEuro = factor(if_else(Nationality == "German" | 
                                  Nationality == "Italian" |
                                  Nationality == "Austrian" |
                                  Nationality == "French" |
                                  Nationality == "Spanish" |
                                  Nationality == "Polish" |
                                  Nationality == "Swiss" |
                                  Nationality == "Romanian" |
                                  Nationality == "Russian", "Yes", "No"), levels = c("No", "Yes")),
    WeightBrWh = factor(if_else(Nationality == "Brazilian" & Color == "White", "Yes", "No"), levels = c("No", "Yes")),
    WeightBrBl = factor(if_else(Nationality == "Brazilian" & Color == "Black", "Yes", "No"), levels = c("No", "Yes")),
    WeightBrMx = factor(if_else(Nationality == "Brazilian" & Color == "Mixed Race", "Yes", "No"), levels = c("No", "Yes")),
    WeightgramsPor = if_else(Nationality == "Portuguese", Weightgrams, NA_real_), # then create weight variables
    WeightgramsGer = if_else(Nationality == "German", Weightgrams, NA_real_),
    WeightgramsIta = if_else(Nationality == "Italian", Weightgrams, NA_real_),
    WeightgramsAus = if_else(Nationality == "Austrian", Weightgrams, NA_real_),
    WeightgramsFr = if_else(Nationality == "French", Weightgrams, NA_real_),
    WeightgramsSp = if_else(Nationality == "Spanish", Weightgrams, NA_real_),
    WeightgramsPol = if_else(Nationality == "Polish", Weightgrams, NA_real_),
    WeightgramsSw = if_else(Nationality == "Swiss", Weightgrams, NA_real_),
    WeightgramsRom = if_else(Nationality == "Romanian", Weightgrams, NA_real_),
    WeightgramsRus = if_else(Nationality == "Russian", Weightgrams, NA_real_),
    WeightgramsArg = if_else(Nationality == "Argentine", Weightgrams, NA_real_),
    WeightgramsPar = if_else(Nationality == "Paraguayan", Weightgrams, NA_real_),
    WeightgramsUr = if_else(Nationality == "Uruguayan", Weightgrams, NA_real_),
    WeightgramsSy = if_else(Nationality == "Syrian", Weightgrams, NA_real_),
    WeightgramsEuro = if_else(WeightEuro == "Yes", Weightgrams, NA_real_),
    WeightgramsBrWh = if_else(Nationality == "Brazilian" & Color == "White", Weightgrams, NA_real_),
    WeightgramsBrBl = if_else(Nationality == "Brazilian" & Color == "Black", Weightgrams, NA_real_),
    WeightgramsBrMx = if_else(Nationality == "Brazilian" & Color == "Mixed Race", Weightgrams, NA_real_)
  )

# Verify new variables
str(ML_summary[, c("WeightPor", "WeightgramsPor", 
                   "WeightGer", "WeightgramsGer", 
                   "WeightIta", "WeightgramsIta", 
                   "WeightAus", "WeightgramsAus", 
                   "WeightFr", "WeightgramsFr", 
                   "WeightSp", "WeightgramsSp", 
                   "WeightPol", "WeightgramsPol", 
                   "WeightSw", "WeightgramsSw",
                   "WeightRom", "WeightgramsRom",
                   "WeightRus", "WeightgramsRus",
                   "WeightArg", "WeightgramsArg",
                   "WeightPar", "WeightgramsPar",
                   "WeightUr", "WeightgramsUr",
                   "WeightSy", "WeightgramsSy",
                   "WeightEuro", "WeightgramsEuro",
                   "WeightBrWh", "WeightgramsBrWh", 
                   "WeightBrBl", "WeightgramsBrBl", 
                   "WeightBrMx", "WeightgramsBrMx")])

# View the updated dataframe
print(head(ML_summary))

# Calculate both mean and median weights by nationality
Euro_stats <- ML_summary %>%
  reframe(
    Portuguese = list(
      n = sum(!is.na(WeightgramsPor)),
      mean = mean(WeightgramsPor, na.rm = TRUE),
      median = median(WeightgramsPor, na.rm = TRUE)
    ),
    German = list(
      n = sum(!is.na(WeightgramsGer)),
      mean = mean(WeightgramsGer, na.rm = TRUE),
      median = median(WeightgramsGer, na.rm = TRUE)
    ),
    Italian = list(
      n = sum(!is.na(WeightgramsIta)),
      mean = mean(WeightgramsIta, na.rm = TRUE),
      median = median(WeightgramsIta, na.rm = TRUE)
    ),
    Austrian = list(
      n = sum(!is.na(WeightgramsAus)),
      mean = mean(WeightgramsAus, na.rm = TRUE),
      median = median(WeightgramsAus, na.rm = TRUE)
    ),
    French = list(
      n = sum(!is.na(WeightgramsFr)),
      mean = mean(WeightgramsFr, na.rm = TRUE),
      median = median(WeightgramsFr, na.rm = TRUE)
    ),
    Spanish = list(
      n = sum(!is.na(WeightgramsSp)),
      mean = mean(WeightgramsSp, na.rm = TRUE),
      median = median(WeightgramsSp, na.rm = TRUE)
    ),
    Polish = list(
      n = sum(!is.na(WeightgramsPol)),
      mean = mean(WeightgramsPol, na.rm = TRUE),
      median = median(WeightgramsPol, na.rm = TRUE)
    ),
    Swiss = list(
      n = sum(!is.na(WeightgramsSw)),
      mean = mean(WeightgramsSw, na.rm = TRUE),
      median = median(WeightgramsSw, na.rm = TRUE)
    ),
    Romanian = list(
      n = sum(!is.na(WeightgramsRom)),
      mean = mean(WeightgramsRom, na.rm = TRUE),
      median = median(WeightgramsRom, na.rm = TRUE)
    ),
    Russian = list(
      n = sum(!is.na(WeightgramsRus)),
      mean = mean(WeightgramsRus, na.rm = TRUE),
      median = median(WeightgramsRus, na.rm = TRUE)
    ),
    Euro = list(
      n = sum(!is.na(WeightgramsEuro)),
      mean = mean(WeightgramsEuro, na.rm = TRUE),
      median = median(WeightgramsEuro, na.rm = TRUE)
    ),
    Argentine = list(
      n = sum(!is.na(WeightgramsArg)),
      mean = mean(WeightgramsArg, na.rm = TRUE),
      median = median(WeightgramsArg, na.rm = TRUE)
    ),
    Paraguayan = list(
      n = sum(!is.na(WeightgramsPar)),
      mean = mean(WeightgramsPar, na.rm = TRUE),
      median = median(WeightgramsPar, na.rm = TRUE)
    ),
    Uruguayan = list(
      n = sum(!is.na(WeightgramsUr)),
      mean = mean(WeightgramsUr, na.rm = TRUE),
      median = median(WeightgramsUr, na.rm = TRUE)
    ),
    Syrian = list(
      n = sum(!is.na(WeightgramsSy)),
      mean = mean(WeightgramsSy, na.rm = TRUE),
      median = median(WeightgramsSy, na.rm = TRUE)
    ),
    Brazil_white = list(
      n = sum(!is.na(WeightgramsBrWh)),
      mean = mean(WeightgramsBrWh, na.rm = TRUE),
      median = median(WeightgramsBrWh, na.rm = TRUE)
    ),
    Brazil_black = list(
      n = sum(!is.na(WeightgramsBrBl)),
      mean = mean(WeightgramsBrBl, na.rm = TRUE),
      median = median(WeightgramsBrBl, na.rm = TRUE)
    ),
    Brazil_mixed = list(
      n = sum(!is.na(WeightgramsBrMx)),
      mean = mean(WeightgramsBrMx, na.rm = TRUE),
      median = median(WeightgramsBrMx, na.rm = TRUE)
    )
  ) %>%
  tidyr::unnest_longer(col = everything())
Euro_stats

# T-test between Portuguese and all other European nationalities combined
t_test_euro <- t.test(ML_summary$WeightgramsPor, ML_summary$WeightgramsEuro)
t_test_euro

t_test_brazil <- t.test(ML_summary$WeightgramsPor, ML_summary$WeightgramsBrWh)
t_test_brazil

# Put t-test into gtsummary table for supplemental analysis
# Create a table with both t-tests
table_ttest <- tibble(
  Comparison = c("Portuguese vs Other European", "Portuguese vs Brazilian White"),
  `t-statistic` = c(t_test_euro$statistic, t_test_brazil$statistic),
  `p-value` = c(t_test_euro$p.value, t_test_brazil$p.value),
  `Mean Difference` = c(diff(t_test_euro$estimate), diff(t_test_brazil$estimate)),
  `95% CI Lower` = c(t_test_euro$conf.int[1], t_test_brazil$conf.int[1]),
  `95% CI Upper` = c(t_test_euro$conf.int[2], t_test_brazil$conf.int[2])
    ) %>%
  gt::gt() %>%
  gt::fmt_number(
    columns = c(`t-statistic`),
    decimals = 2
  ) %>%
  gt::fmt_number(
    columns = c(`p-value`),
    decimals = 3
  ) %>%
  gt::fmt_number(
    columns = c(`Mean Difference`, `95% CI Lower`, `95% CI Upper`),
    decimals = 1
  ) %>%
  gt::tab_header(
    title = "T-Test Results"
  )
table_ttest

# Save the table
saveRDS(table_ttest, file = here::here("results", "tables", "table_ttest_final.rds"))

# Put means into gtsummary table for supplemental analysis
table_nationality_stats <- ML_summary %>%
  select(WeightgramsPor, WeightgramsGer, WeightgramsIta, WeightgramsAus,
         WeightgramsFr, WeightgramsSp, WeightgramsPol, WeightgramsSw,
         WeightgramsRom, WeightgramsRus, WeightgramsEuro, WeightgramsArg,
         WeightgramsPar, WeightgramsUr, WeightgramsSy, WeightgramsBrWh,
         WeightgramsBrBl, WeightgramsBrMx) %>%
  tbl_summary(
    missing = "no",
    label = list(
      WeightgramsPor ~ "Portuguese",
      WeightgramsGer ~ "German",
      WeightgramsIta ~ "Italian",
      WeightgramsAus ~ "Austrian",
      WeightgramsFr ~ "French",
      WeightgramsSp ~ "Spanish",
      WeightgramsPol ~ "Polish",
      WeightgramsSw ~ "Swiss",
      WeightgramsRom ~ "Romanian",
      WeightgramsRus ~ "Russian",
      WeightgramsEuro ~ "European (Exc. Portuguese)",
      WeightgramsArg ~ "Argentine",
      WeightgramsPar ~ "Paraguayan",
      WeightgramsUr ~ "Uruguayan",
      WeightgramsSy ~ "Syrian",
      WeightgramsBrWh ~ "Brazilian White",
      WeightgramsBrBl ~ "Brazilian Black",
      WeightgramsBrMx ~ "Brazilian Mixed-Race"
    ),
    type = list(everything() ~ "continuous"),
    statistic = list(all_continuous() ~ "{mean} ({p25}, {p75})"),
    digits = everything() ~ 0 # all numbers to 0 decimal places
  ) %>%
  add_n() %>%
  modify_header(label ~ "**Nationality**",
                stat_0 ~ "**Mean (Q1, Q3)**",
                n ~ "**N**")
table_nationality_stats

# Save table for supplemental analysis
saveRDS(table_nationality_stats, file = here::here("results", "tables", "table_nationality_stats_final.rds"))
```
The t-tests demonstrate no significant difference in the mean birthweight between Portuguese and all other European immigrants and between Portuguese and White Brazilian women. This suggests that differentiating European nationality further will not influence the regression results.

Further, because there is only 1 observation for Austrian nationality; 3 observations for French nationality; and 2 observations for Polish and Swiss nationalities, I will drop these from my larger summary table.

```{r}
# Summarize missing data using dplyr
missing_data_summary <- ML_summary %>% dplyr::summarise_all(list(~sum(is.na(.))))
missing_data_summary

# Save new summary data with recoded factor variables
saveRDS(ML_summary, file = here("data", "processed-data", "ML_summary.rds"))
```

`Gtsummary` is a very easy way to create summary statistics (Table 1). For previous code I worked on in relation to summary stats, see the `edacode-extra.R` file. I have excluded all nationalities with sample sizes smaller than 10 for infant birth weight (Argentine, Paraguayan, Syrian, Uruguayan, Romanian, French, Polish, Swiss, and Austrian).

```{r, output="html"}
# Create gtsummary table full table for supplemental analysis
table_supplemental <- 
  ML_summary %>%
  tbl_summary(
    include = c(Color, Status, Age, Nationality, Birth, MaternalOutcome, FetalOutcome, Sex, Lengthcentimeters, Weightgrams),
    missing = "no",
    label = list(
      Color ~ "Skin color",
      Status ~ "Parity or Gravidity",
      Age ~ "Maternal Age",
      Nationality ~ "Nationality",
      Birth ~ "Birth Outcome", 
      MaternalOutcome ~ "Maternal Outcome", 
      FetalOutcome ~ "Fetal Outcome",
      Sex ~ "Infant Sex",
      Lengthcentimeters ~ "Birth Length (cms)", 
      Weightgrams ~ "Birth Weight (grms)"
      ),
    statistic = list(all_continuous() ~ "{mean} ({p25}, {p75})")
  ) %>%
  add_n()
table_supplemental

#Save table
saveRDS(table_supplemental, file = here::here("results", "tables", "table_supplemental_final.rds"))

# Create gtsummary table for final analysis
table1 <- 
  ML_summary %>%
  tbl_summary(
    include = c(Color, ModifiedColor, ModifiedStatus, Age, ModifiedNationality, Birth, MaternalOutcome, FetalOutcome, Sex, Lengthcentimeters, Weightgrams, WeightgramsBlack, WeightgramsMixed, WeightgramsWhite, WeightgramsAfro, WeightgramsEuro, WeightgramsPor, WeightgramsGer, WeightgramsIta, WeightgramsSp, WeightgramsRus, WeightgramsBrWh, WeightgramsFemale, WeightgramsMale, BirthweightCategory),
    missing = "no",
    type = list(WeightgramsRus ~ "continuous"),
    label = list(
      Color ~ "Color",
      ModifiedColor ~ "Ancestry", 
      ModifiedStatus ~ "Parity", 
      Age ~ "Maternal Age", 
      ModifiedNationality ~ "Combined Nationality", 
      Birth ~ "Birth Outcome", 
      MaternalOutcome ~ "Maternal Outcome", 
      FetalOutcome ~ "Fetal Outcome", 
      Sex ~ "Sex",
      Lengthcentimeters ~ "Birth Length (cm)", 
      Weightgrams ~ "Birth Weight (g)",
      WeightgramsBlack ~ "Black",
      WeightgramsMixed ~ "Mixed-Race",
      WeightgramsWhite ~ "White",
      WeightgramsAfro ~ "Afro-Descent",
      WeightgramsEuro ~ "Euro-Descent",
      WeightgramsPor ~ "Portuguese",
      WeightgramsGer ~ "German",
      WeightgramsIta ~ "Italian",
      WeightgramsSp ~ "Spanish",
      WeightgramsRus ~ "Russian",
      WeightgramsBrWh ~ "White Brazilian",
      WeightgramsFemale ~ "Female",
      WeightgramsMale ~ "Male",
      BirthweightCategory ~ "Birth Weight Category"
    ),
    statistic = list(
       all_continuous() ~ "{mean} ({p25}, {p75})",
       WeightgramsRus ~ "{mean} ({p25}, {p75})"
    )
  ) %>%
  add_n() %>%
  modify_table_body( #indent these three rows
    ~.x %>%
      mutate(label = case_when(
        variable == "WeightgramsBlack" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsWhite" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsMixed" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsAfro" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsEuro" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsPor" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsGer" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsIta" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsSp" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsRus" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsBrWh" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsFemale" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        variable == "WeightgramsMale" ~ paste0("\u00A0\u00A0\u00A0\u00A0", label),
        TRUE ~ label
      )) 
    )
table1

#Save table
saveRDS(table1, file = here::here("results", "tables", "table1_final.rds"))
```

For maternal skin color, we have a sample size of n = 2695. The majority of the sample is White (*branca*), with 42.45% of the sample. Mixed-race (*parda*) is 29.2% of the sample, and Black (*preta*) is 28.32% of the sample. I'll now compare White patients to all patients of color by combining Black and mixed-race categories. I will create a dummy variable for color, called `ModifiedColor` with two categories: Afro-Descent (comprising *parda* and *preta*) and Euro-Descent (comprising *branca*).

Of the clinic patients, 1551 (57.6%) were of African descent (defined as *preta* or *parda*) and 1144 (42.4%) were of European descent (branca).

Of a sample size of n = 2761, 88% of outcomes were natural deliveries. 

I'll now remove abortion from the dataset to look solely at labor and delivery outcomes.

```{r}
# Calculate frequencies of birth category without abortion
birth_freq2 <- ML_summary %>%
  filter(!is.na(Birth)) %>% # Exclude rows with NA in birth variable
  filter(Birth != "Abortion") %>% # Exclude rows with abortion
  count(Birth, na.rm = TRUE) %>% # Calculate frequencies while excluding NAs
  mutate(Total_Sample_Size = sum(n)) %>% # Calculate total sample size 
  mutate(Percent = n/sum(n)*100) # Calculate percentage of each category
print(birth_freq2)
```

Of the new sample of n = 2672, 91% of outcomes were natural deliveries.

Maternal outcomes are also important to understand, including the following reproductive and perinatal health statistics: maternal mortality ratio (MMR), stillbirth rate (SBR), and sex ratio at birth (SRaB). For MMR, the equation is MMR = MD/LB * 10,000. For SBR, the equation is SBR = SB/LB * 1000. For SRaB, the equation is SRaB = (M/F) * 100.

```{r}
#MMR Maternal mortality ratio
maternal_deaths <-23
live_births <- 2445
MMR <- (maternal_deaths / live_births) * 10000
MMR

#Stillbirth rate SBR
still_births <- 221
total_births <- 2666
SBR <- (still_births / total_births) * 1000
SBR

#Sex ratio at birth (live male births/live female births)*100
sex_ratio <- ML_summary %>%
  filter(!Birth %in% c("Abortion") & !FetalOutcome %in% c("Stillbirth")) %>% # Exclude rows with abortion and stillbirth
 filter(!is.na(Sex) & !is.na(Birth) & !is.na(FetalOutcome)) %>%
  group_by(Sex) %>%
  summarise(count = n()) %>%
  spread(key = Sex, value = count) %>%
  mutate(SexRatio = M / F) * 100
sex_ratio
```

The MMR is 94.1% in this specific hospital. The SBR is 82.9% in this specific hospital. The sex ratio is 1.2 or there were 120 male live births per 100 female live births at this hospital. This is much higher than the current range of between 103 and 107 male births per 100 female births.

Now I will create the summary table for mean birth weights across time and place.

```{r}
#Path to summary data. Note the use of the here() package and not absolute paths
data_location <- here::here("data","processed-data","Mean_Birthweights.rds")

#load data
Mean_Birthweights <- readRDS(data_location)

# Replace NA with a dash for each column
Mean_Birthweights <- Mean_Birthweights %>%
  mutate(across(where(is.numeric), ~ ifelse(is.na(.), "-", as.character(.)))) %>%
  mutate(across(where(is.character), ~ replace_na(., "-")))

# Display the table using flextable
table2 <- flextable(Mean_Birthweights) %>%
  set_caption("Mean Birth Weight Comparison") %>%
  align(j = 2, align = "left", part = "all") %>%
  align(j = 4, align = "right", part = "all") %>%
  set_header_labels(
    Sample = "Sample",
    Year = "Year", 
    Mean = "Mean (grams)",
    Source = "Source"
  ) %>%
  bold(part = "header") %>%
  #autofit() %>%
  set_table_properties(layout = "autofit", width = 1, align = "center")
table2

#Save table
saveRDS(table2, file = here::here("results", "tables", "table2_final.rds"))
```

Now I will compute total fertility rates for Rio de Janeiro, São Paulo, and Brazil from 1940 data.

```{r}
# Path to summary data. Note the use of the here() package and not absolute paths
data_location <- here::here("data","processed-data","Fertility_Rates.rds")

# Load data
Fertility_Rates <- readRDS(data_location)

# Check structure
str(Fertility_Rates)

tfr_region <- Fertility_Rates %>%
  group_by(Region) %>%
  summarize(TFR = round(sum(`Age-Specific Rate`)/100, 1))

# To view the results
print(tfr_region)
```

# ML Linear Data

Because I am working on a different subset of the data, `ML_linear` for the statistical analysis, I will also need to recategorize variables here.

Load the data. 

```{r}
# Path to summary data. Note the use of the here() package and not absolute paths
data_location <- here::here("data","processed-data","ML_linear.rds")

# Load data
ML_linear <- readRDS(data_location)
```

Now I will create dummy variables.

```{r}
# Check pre-structure
str(ML_linear)

# Change remaining observations from Portuguese to English
ML_linear <- ML_linear %>%
  mutate(
    Color = recode_factor(Color, "Preta" = "Black", "Parda" = "Mixed Race", "Branca" = "White"),
    Nationality = recode_factor(Nationality, "Alema" = "German", "Argentina" = "Argentine", "Austriaca" = "Austrian", "Brasileira" = "Brazilian", "Espanhola" = "Spanish", "Francesa" = "French", "Italiana" = "Italian", "Paraguaya" = "Paraguayan", "Polaca" = "Polish", "Portuguesa" = "Portuguese", "Rumania" = "Romanian", "Russa" = "Russian", "Suiça" = "Swiss", "Siria" = "Syrian", "Uruguaya" = "Uruguayan"),
    Birth = recode_factor(Birth, "aborto" = "Abortion", "intervencionista" = "Interventionist", "natural" = "Natural", "operatório" = "Operative"),
    MaternalOutcome = recode_factor(MaternalOutcome, "alta" = "Discharged", "morta" = "Death", "transferência" = "Hospital transferal"),
    FetalOutcome = recode_factor(FetalOutcome, "vivo" = "Live Birth", "morto" = "Stillbirth")
    )

# Create new variables
ML_linear <- ML_linear %>%
  mutate(
    ModifiedColor = factor(ifelse(Color %in% c("Black", "Mixed Race"), # dummy variables for color and change to English
                                 "Afro-Descent", "Euro-Descent"),
                          levels = c("Euro-Descent", "Afro-Descent")),
    ModifiedStatus = factor(case_when( # dummy variables for status and change to English
      Status %in% c("Secundigesta", "Trigesta", "Multigesta", "Secundipara", "Multipara") ~ "Multiparous",
      Status %in% c("Primigesta", "Nulipara", "Primipara") ~ "Nulliparous",
      TRUE ~ NA_character_
    ), levels = c("Nulliparous", "Multiparous")),
    ModifiedNationality = factor(case_when( # dummy variables for nationality and change to English
      Nationality %in% c("German", "Austrian", "Spanish", "French", "Italian", 
                        "Polish", "Portuguese", "Romanian", "Russian", "Swiss") ~ "European",
      Nationality %in% c("Argentine", "Paraguayan", "Uruguayan") ~ "Latin American",
      Nationality == "Brazilian" ~ "Brazilian",
      Nationality == "Syrian" ~ "Middle Eastern",
      TRUE ~ NA_character_
    ), levels = c("Brazilian", "European", "Latin American", "Middle Eastern")),
    Brazilian = factor(ifelse(ModifiedNationality == "Brazilian", # create dummy variable for Brazilian/non-Brazilian to check for collinearity between skin color and immigration status
                             "yes", "no"),
                      levels = c("yes", "no")),
    AgeSquared = Age^2) # create squared term for age

# Verify the new structure
str(ML_linear)

# Save new linear data with recoded factor variables
saveRDS(ML_linear, file = here("data", "processed-data", "ML_linear.rds"))
```
# Notes